------------------------------------------------------------------------------
-- user_logic.vhd - entity/architecture pair
------------------------------------------------------------------------------
--
-- ***************************************************************************
-- ** Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.            **
-- **                                                                       **
-- ** Xilinx, Inc.                                                          **
-- ** XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"         **
-- ** AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND       **
-- ** SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE,        **
-- ** OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,        **
-- ** APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION           **
-- ** THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,     **
-- ** AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE      **
-- ** FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY              **
-- ** WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE               **
-- ** IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR        **
-- ** REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF       **
-- ** INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS       **
-- ** FOR A PARTICULAR PURPOSE.                                             **
-- **                                                                       **
-- ***************************************************************************
--
------------------------------------------------------------------------------
-- Filename:          user_logic.vhd
-- Version:           1.00.a
-- Description:       User logic.
-- Date:              Wed Nov 19 18:26:09 2014 (by Create and Import Peripheral Wizard)
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Naming Conventions:
--   active low signals:                    "*_n"
--   clock signals:                         "clk", "clk_div#", "clk_#x"
--   reset signals:                         "rst", "rst_n"
--   generics:                              "C_*"
--   user defined types:                    "*_TYPE"
--   state machine next state:              "*_ns"
--   state machine current state:           "*_cs"
--   combinatorial signals:                 "*_com"
--   pipelined or register delay signals:   "*_d#"
--   counter signals:                       "*cnt*"
--   clock enable signals:                  "*_ce"
--   internal version of output port:       "*_i"
--   device pins:                           "*_pin"
--   ports:                                 "- Names begin with Uppercase"
--   processes:                             "*_PROCESS"
--   component instantiations:              "<ENTITY_>I_<#|FUNC>"
------------------------------------------------------------------------------

-- DO NOT EDIT BELOW THIS LINE --------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;

-- DO NOT EDIT ABOVE THIS LINE --------------------

--USER libraries added here

------------------------------------------------------------------------------
-- Entity section
------------------------------------------------------------------------------
-- Definition of Generics:
--   C_NUM_REG                    -- Number of software accessible registers
--   C_SLV_DWIDTH                 -- Slave interface data bus width
--
-- Definition of Ports:
--   Bus2IP_Clk                   -- Bus to IP clock
--   Bus2IP_Resetn                -- Bus to IP reset
--   Bus2IP_Data                  -- Bus to IP data bus
--   Bus2IP_BE                    -- Bus to IP byte enables
--   Bus2IP_RdCE                  -- Bus to IP read chip enable
--   Bus2IP_WrCE                  -- Bus to IP write chip enable
--   IP2Bus_Data                  -- IP to Bus data bus
--   IP2Bus_RdAck                 -- IP to Bus read transfer acknowledgement
--   IP2Bus_WrAck                 -- IP to Bus write transfer acknowledgement
--   IP2Bus_Error                 -- IP to Bus error response
------------------------------------------------------------------------------

entity user_logic is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_NUM_REG                      : integer              := 32;
    C_SLV_DWIDTH                   : integer              := 32
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------
    led0                           : out std_logic;
    led1                           : out std_logic;
    led2                           : out std_logic;
    led3                           : out std_logic;
    led4                           : out std_logic;
    led5                           : out std_logic;
    led6                           : out std_logic;
    led7                           : out std_logic;
    led8                           : out std_logic;
    led9                           : out std_logic;
    led10                          : out std_logic;
    led11                          : out std_logic;
    led12                          : out std_logic;
    led13                          : out std_logic;
    led14                          : out std_logic;
    led15                          : out std_logic;
    led16                          : out std_logic;
    led17                          : out std_logic;
    led18                          : out std_logic;
    led19                          : out std_logic;
    led20                          : out std_logic;
    led21                          : out std_logic;
    led22                          : out std_logic;
    led23                          : out std_logic;
    led24                          : out std_logic;
    led25                          : out std_logic;
    led27                          : out std_logic;
    led28                          : out std_logic;
    led29                          : out std_logic;
    -- ADD USER PORTS ABOVE THIS LINE ------------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol ports, do not add to or delete
    Bus2IP_Clk                     : in  std_logic;
    Bus2IP_Resetn                  : in  std_logic;
    Bus2IP_Data                    : in  std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    Bus2IP_BE                      : in  std_logic_vector(C_SLV_DWIDTH/8-1 downto 0);
    Bus2IP_RdCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    Bus2IP_WrCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    IP2Bus_Data                    : out std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    IP2Bus_RdAck                   : out std_logic;
    IP2Bus_WrAck                   : out std_logic;
    IP2Bus_Error                   : out std_logic
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );

  attribute MAX_FANOUT : string;
  attribute SIGIS : string;

  attribute SIGIS of Bus2IP_Clk    : signal is "CLK";
  attribute SIGIS of Bus2IP_Resetn : signal is "RST";

end entity user_logic;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of user_logic is

    COMPONENT clk_prescaler
    PORT(
         in_clk : IN  std_logic;
         rst : in STD_LOGIC;
         prescaler_value : IN  std_logic_vector(4 downto 0);
         out_clk : OUT  std_logic
        );
    END COMPONENT;
    
    COMPONENT pwm
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         enable : IN  std_logic;
         top : IN  std_logic_vector(31 downto 0);
         duty_cycle : IN  std_logic_vector(31 downto 0);
         output : OUT  std_logic
        );
    END COMPONENT;

  --USER signal declarations added here, as needed for user logic
  signal clk_sig			: std_logic;
  signal rst_sig			: std_logic;
  signal enable_sig			: std_logic;
  signal prescale_value_sig : std_logic_vector(4 downto 0);

  ------------------------------------------
  -- Signals for user logic slave model s/w accessible register example
  ------------------------------------------
  signal control_reg                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal top_reg                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_0                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_1                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_2                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_3                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_4                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_5                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_6                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_7                       : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_8                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_9                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_10                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_11                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_12                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_13                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_14                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_15                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_16                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_17                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_18                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_19                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_20                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_21                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_22                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_23                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_24                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_25                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_26                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_27                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_28                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal duty_cycle_reg_29                      : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal slv_reg_write_sel              : std_logic_vector(31 downto 0);
  signal slv_reg_read_sel               : std_logic_vector(31 downto 0);
  signal slv_ip2bus_data                : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal slv_read_ack                   : std_logic;
  signal slv_write_ack                  : std_logic;

begin

  --USER logic implementation added here
  	-- Instantiate the Unit Under Test (UUT)
   	prescaler: clk_prescaler PORT MAP (
          	in_clk => Bus2IP_Clk,
         	rst => rst_sig,
          	prescaler_value => prescaler_value_sig,
          	out_clk => clk_sig
   		);
	
	pwm0: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_0,
          	output => led0
      	);
	pwm1: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_1,
          	output => led1
      	);
	pwm2: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_2,
          	output => led2
      	);
	pwm3: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_3,
          	output => led3
      	);
	pwm4: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_4,
          	output => led4
      	);
	pwm5: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_5,
          	output => led5
      	);
	pwm6: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_6,
          	output => led6
      	);
	pwm7: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_7,
          	output => led7
      	);
	pwm8: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_8,
          	output => led8
      	);
	pwm9: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_9,
          	output => led9
      	);
	pwm10: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_10,
          	output => led10
      	);
	pwm11: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_11,
          	output => led11
      	);
	pwm12: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_12,
          	output => led12
      	);
	pwm13: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_13,
          	output => led13
      	);
	pwm14: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_14,
          	output => led14
      	);
	pwm15: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_15,
          	output => led15
      	);
	pwm16: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_16,
          	output => led16
      	);
	pwm17: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_17,
          	output => led17
      	);
	pwm18: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_18,
          	output => led18
      	);
	pwm19: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_19,
          	output => led19
      	);
	pwm20: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_20,
          	output => led20
      	);
	pwm21: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_21,
          	output => led21
      	);
	pwm22: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_22,
          	output => led22
      	);
	pwm23: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_23,
          	output => led23
      	);
	pwm24: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_24,
          	output => led24
      	);
	pwm25: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_25,
          	output => led25
      	);
	pwm26: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_26,
          	output => led26
      	);
	pwm27: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_27,
          	output => led27
      	);
	pwm28: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_28,
          	output => led28
      	);
	pwm29: pwm PORT MAP (
          	clk => clk_sig,
          	rst => rst_sig,
          	enable => enable_sig,
          	top => top_reg,
          	duty_cycle => duty_cyle_reg_29,
          	output => led29
      	);
	enable_sig <= control_reg(0);
	rst_sig <= control_reg(1);
	prescaler_value_sig <= control_reg(6 downto 2); 

  ------------------------------------------
  -- Example code to read/write user logic slave model s/w accessible registers
  -- 
  -- Note:
  -- The example code presented here is to show you one way of reading/writing
  -- software accessible registers implemented in the user logic slave model.
  -- Each bit of the Bus2IP_WrCE/Bus2IP_RdCE signals is configured to correspond
  -- to one software accessible register by the top level template. For example,
  -- if you have four 32 bit software accessible registers in the user logic,
  -- you are basically operating on the following memory mapped registers:
  -- 
  --    Bus2IP_WrCE/Bus2IP_RdCE   Memory Mapped Register
  --                     "1000"   C_BASEADDR + 0x0
  --                     "0100"   C_BASEADDR + 0x4
  --                     "0010"   C_BASEADDR + 0x8
  --                     "0001"   C_BASEADDR + 0xC
  -- 
  ------------------------------------------
  slv_reg_write_sel <= Bus2IP_WrCE(31 downto 0);
  slv_reg_read_sel  <= Bus2IP_RdCE(31 downto 0);
  slv_write_ack     <= Bus2IP_WrCE(0) or Bus2IP_WrCE(1) or Bus2IP_WrCE(2) or Bus2IP_WrCE(3) or Bus2IP_WrCE(4) or Bus2IP_WrCE(5) or Bus2IP_WrCE(6) or Bus2IP_WrCE(7) or Bus2IP_WrCE(8) or Bus2IP_WrCE(9) or Bus2IP_WrCE(10) or Bus2IP_WrCE(11) or Bus2IP_WrCE(12) or Bus2IP_WrCE(13) or Bus2IP_WrCE(14) or Bus2IP_WrCE(15) or Bus2IP_WrCE(16) or Bus2IP_WrCE(17) or Bus2IP_WrCE(18) or Bus2IP_WrCE(19) or Bus2IP_WrCE(20) or Bus2IP_WrCE(21) or Bus2IP_WrCE(22) or Bus2IP_WrCE(23) or Bus2IP_WrCE(24) or Bus2IP_WrCE(25) or Bus2IP_WrCE(26) or Bus2IP_WrCE(27) or Bus2IP_WrCE(28) or Bus2IP_WrCE(29) or Bus2IP_WrCE(30) or Bus2IP_WrCE(31);
  slv_read_ack      <= Bus2IP_RdCE(0) or Bus2IP_RdCE(1) or Bus2IP_RdCE(2) or Bus2IP_RdCE(3) or Bus2IP_RdCE(4) or Bus2IP_RdCE(5) or Bus2IP_RdCE(6) or Bus2IP_RdCE(7) or Bus2IP_RdCE(8) or Bus2IP_RdCE(9) or Bus2IP_RdCE(10) or Bus2IP_RdCE(11) or Bus2IP_RdCE(12) or Bus2IP_RdCE(13) or Bus2IP_RdCE(14) or Bus2IP_RdCE(15) or Bus2IP_RdCE(16) or Bus2IP_RdCE(17) or Bus2IP_RdCE(18) or Bus2IP_RdCE(19) or Bus2IP_RdCE(20) or Bus2IP_RdCE(21) or Bus2IP_RdCE(22) or Bus2IP_RdCE(23) or Bus2IP_RdCE(24) or Bus2IP_RdCE(25) or Bus2IP_RdCE(26) or Bus2IP_RdCE(27) or Bus2IP_RdCE(28) or Bus2IP_RdCE(29) or Bus2IP_RdCE(30) or Bus2IP_RdCE(31);

  -- implement slave model software accessible register(s)
  SLAVE_REG_WRITE_PROC : process( Bus2IP_Clk ) is
  begin

    if Bus2IP_Clk'event and Bus2IP_Clk = '1' then
      if Bus2IP_Resetn = '0' then
        control_reg <= (others => '0');
        top_reg <= (others => '0');
        duty_cycle_reg_0 <= (others => '0');
        duty_cycle_reg_1 <= (others => '0');
        duty_cycle_reg_2 <= (others => '0');
        duty_cycle_reg_3 <= (others => '0');
        duty_cycle_reg_4 <= (others => '0');
        duty_cycle_reg_5 <= (others => '0');
        duty_cycle_reg_6 <= (others => '0');
        duty_cycle_reg_7 <= (others => '0');
        duty_cycle_reg_8 <= (others => '0');
        duty_cycle_reg_9 <= (others => '0');
        duty_cycle_reg_10 <= (others => '0');
        duty_cycle_reg_11 <= (others => '0');
        duty_cycle_reg_12 <= (others => '0');
        duty_cycle_reg_13 <= (others => '0');
        duty_cycle_reg_14 <= (others => '0');
        duty_cycle_reg_15 <= (others => '0');
        duty_cycle_reg_16 <= (others => '0');
        duty_cycle_reg_17 <= (others => '0');
        duty_cycle_reg_18 <= (others => '0');
        duty_cycle_reg_19 <= (others => '0');
        duty_cycle_reg_20 <= (others => '0');
        duty_cycle_reg_21 <= (others => '0');
        duty_cycle_reg_22 <= (others => '0');
        duty_cycle_reg_23 <= (others => '0');
        duty_cycle_reg_24 <= (others => '0');
        duty_cycle_reg_25 <= (others => '0');
        duty_cycle_reg_26 <= (others => '0');
        duty_cycle_reg_27 <= (others => '0');
        duty_cycle_reg_28 <= (others => '0');
        duty_cycle_reg_29 <= (others => '0');
      else
        case slv_reg_write_sel is
          when "10000000000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                control_reg(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "01000000000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                top_reg(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00100000000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_0(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00010000000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_1(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00001000000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_2(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000100000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_3(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000010000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_4(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000001000000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_5(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000100000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_6(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000010000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_7(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000001000000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_8(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000100000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_9(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000010000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_10(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000001000000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_11(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000100000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_12(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000010000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_13(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000001000000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_14(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000100000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_15(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000010000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_16(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000001000000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_17(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000100000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_18(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000010000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_19(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000001000000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_20(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000100000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_21(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000010000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_22(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000001000000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_23(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000000100000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_24(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000000010000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_25(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000000001000" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_26(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000000000100" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_27(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000000000010" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_28(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when "00000000000000000000000000000001" =>
            for byte_index in 0 to (C_SLV_DWIDTH/8)-1 loop
              if ( Bus2IP_BE(byte_index) = '1' ) then
                duty_cycle_reg_29(byte_index*8+7 downto byte_index*8) <= Bus2IP_Data(byte_index*8+7 downto byte_index*8);
              end if;
            end loop;
          when others => null;
        end case;
      end if;
    end if;

  end process SLAVE_REG_WRITE_PROC;

  -- implement slave model software accessible register(s) read mux
  SLAVE_REG_READ_PROC : process( slv_reg_read_sel, control_reg, top_reg, duty_cycle_reg_0, duty_cycle_reg_1, duty_cycle_reg_2, duty_cycle_reg_3, duty_cycle_reg_4, duty_cycle_reg_5, duty_cycle_reg_6, duty_cycle_reg_7, duty_cycle_reg_8, duty_cycle_reg_9, duty_cycle_reg_10, duty_cycle_reg_11, duty_cycle_reg_12, duty_cycle_reg_13, duty_cycle_reg_14, duty_cycle_reg_15, duty_cycle_reg_16, duty_cycle_reg_17, duty_cycle_reg_18, duty_cycle_reg_19, duty_cycle_reg_20, duty_cycle_reg_21, duty_cycle_reg_22, duty_cycle_reg_23, duty_cycle_reg_24, duty_cycle_reg_25, duty_cycle_reg_26, duty_cycle_reg_27, duty_cycle_reg_28, duty_cycle_reg_29 ) is
  begin

    case slv_reg_read_sel is
      when "10000000000000000000000000000000" => slv_ip2bus_data <= control_reg;
      when "01000000000000000000000000000000" => slv_ip2bus_data <= top_reg;
      when "00100000000000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_0;
      when "00010000000000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_1;
      when "00001000000000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_2;
      when "00000100000000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_3;
      when "00000010000000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_4;
      when "00000001000000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_5;
      when "00000000100000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_6;
      when "00000000010000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_7;
      when "00000000001000000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_8;
      when "00000000000100000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_9;
      when "00000000000010000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_10;
      when "00000000000001000000000000000000" => slv_ip2bus_data <= duty_cycle_reg_11;
      when "00000000000000100000000000000000" => slv_ip2bus_data <= duty_cycle_reg_12;
      when "00000000000000010000000000000000" => slv_ip2bus_data <= duty_cycle_reg_13;
      when "00000000000000001000000000000000" => slv_ip2bus_data <= duty_cycle_reg_14;
      when "00000000000000000100000000000000" => slv_ip2bus_data <= duty_cycle_reg_15;
      when "00000000000000000010000000000000" => slv_ip2bus_data <= duty_cycle_reg_16;
      when "00000000000000000001000000000000" => slv_ip2bus_data <= duty_cycle_reg_17;
      when "00000000000000000000100000000000" => slv_ip2bus_data <= duty_cycle_reg_18;
      when "00000000000000000000010000000000" => slv_ip2bus_data <= duty_cycle_reg_19;
      when "00000000000000000000001000000000" => slv_ip2bus_data <= duty_cycle_reg_20;
      when "00000000000000000000000100000000" => slv_ip2bus_data <= duty_cycle_reg_21;
      when "00000000000000000000000010000000" => slv_ip2bus_data <= duty_cycle_reg_22;
      when "00000000000000000000000001000000" => slv_ip2bus_data <= duty_cycle_reg_23;
      when "00000000000000000000000000100000" => slv_ip2bus_data <= duty_cycle_reg_24;
      when "00000000000000000000000000010000" => slv_ip2bus_data <= duty_cycle_reg_25;
      when "00000000000000000000000000001000" => slv_ip2bus_data <= duty_cycle_reg_26;
      when "00000000000000000000000000000100" => slv_ip2bus_data <= duty_cycle_reg_27;
      when "00000000000000000000000000000010" => slv_ip2bus_data <= duty_cycle_reg_28;
      when "00000000000000000000000000000001" => slv_ip2bus_data <= duty_cycle_reg_29;
      when others => slv_ip2bus_data <= (others => '0');
    end case;

  end process SLAVE_REG_READ_PROC;

  ------------------------------------------
  -- Example code to drive IP to Bus signals
  ------------------------------------------
  IP2Bus_Data  <= slv_ip2bus_data when slv_read_ack = '1' else
                  (others => '0');

  IP2Bus_WrAck <= slv_write_ack;
  IP2Bus_RdAck <= slv_read_ack;
  IP2Bus_Error <= '0';

end IMP;
