/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>

#include "fmc_imageon_hdmi_framebuffer.h"
#include "pwm.h"

#define LED_PWM_REGISTER_ADDRESS 0x76600000

#define ROWS (1080)
#define COLS (1920/2)

#define DEFAULT_AMBIENT_DEPTH 200
#define HORIZONTAL_WIDTH_LARGE 320
#define HORIZONTAL_WIDTH_SMALL 160
#define VERTICAL_WIDTH_LARGE 540
#define VERTICAL_WIDTH_SMALL 270
#define WIDTH 1920/2
#define HEIGHT 1080
#define NUM_PIXELS WIDTH * HEIGHT
#define WHITE 0xFF80FF80
#define LARGER(x,y) (x>y) ? x : y

#define SW0 0x01
#define BTNU 0x10
#define BTND 0x02

fmc_imageon_hdmi_framebuffer_t frame;

//typedef struct RGB_STRUCT
//{
//	unsigned char red;
//	unsigned char green;
//	unsigned char blue;
//}rgb_color;

typedef union
{
	struct YCBCR_STRUCT
	{
		unsigned char cb;
		unsigned char y0;
		unsigned char cr;
		unsigned char y1;
	}data;
	Xuint32 value;
}ycbcr_color;

void print( const char *str);

void ambient_light_loop(fmc_imageon_hdmi_framebuffer_t *config, Pwm *pwm);

rgb_color get_led_avg(volatile ycbcr_color* video_data, int x_min, int x_max, int y_min, int y_max);

void draw_lines(volatile ycbcr_color* video_data_out,
		volatile ycbcr_color* video_data_in,
		int ambient_depth);

inline rgb_color ycbcr_to_rgb(ycbcr_color pixel)
{
	rgb_color color;

	color.red = (unsigned char) (1.596025944392623870454290647911*pixel.data.cr + 1.1643826270473349737996458353245*pixel.data.y0 - 222.92058710252648559055847895784);
	color.green = (unsigned char) (1.1643826270473349242752893259399*pixel.data.y0 - 0.81297029871771590607200167606938*pixel.data.cr - 0.39176129346906180814419163527246*pixel.data.cb + 135.57552176715018863126811463672);
	color.blue = (unsigned char) (2.0172349496412779735702115082657*pixel.data.cb + 1.1643826270473350116266570343734*pixel.data.y0 - 276.83596224693641286354268888981);

	return color;
}

int main()
{
	Pwm pwm;
    frame.uBaseAddr_IIC_FmcImageon = XPAR_FMC_IMAGEON_IIC_0_BASEADDR;
    frame.uDeviceId_VTC_HdmiiDetector = XPAR_V_TC_VID_IN_0_DEVICE_ID;
    frame.uDeviceId_VTC_HdmioGenerator = XPAR_V_TC_VID_OUT_0_DEVICE_ID;
    frame.uDeviceId_VDMA_HdmiFrameBuffer = XPAR_AXI_VDMA_0_DEVICE_ID;
    frame.uBaseAddr_MEM_HdmiFrameBuffer = XPAR_DDR_MEM_BASEADDR + 0x10000000;
    frame.uNumFrames_HdmiFrameBuffer = XPAR_AXIVDMA_0_NUM_FSTORES;
    fmc_imageon_hdmi_framebuffer_init( &frame );

    PwmInitalize(&pwm, (void*)LED_PWM_REGISTER_ADDRESS, 0x00);
    PwmStart(&pwm, 256, 8);
    
    ambient_light_loop(&frame, &pwm);

    return 0;
}

// Main (SW) processing loop. Recommended to have an explicit exit condition
void ambient_light_loop(fmc_imageon_hdmi_framebuffer_t *config, Pwm* pwm)
{
	int i;
	rgb_color leds[10];
	Xuint32 parkptr;
	Xuint32 vdma_S2MM_DMACR, vdma_MM2S_DMACR;
	Xuint32 buttons, switches;
	int prev_btnu = 0;
	int prev_btnd = 0;
	int ambient_depth = DEFAULT_AMBIENT_DEPTH;

	printf("Entering main SW processing loop\r\n");


	// Grab the DMA parkptr, and update it to ensure that when parked, the S2MM side is on frame 0, and the MM2S side on frame 1
	parkptr = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET);
	parkptr &= ~XAXIVDMA_PARKPTR_READREF_MASK;
	parkptr &= ~XAXIVDMA_PARKPTR_WRTREF_MASK;
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET, parkptr);


	// Grab the DMA Control Registers, and clear circular park mode.
	vdma_MM2S_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET);
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_TX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_MM2S_DMACR & ~XAXIVDMA_CR_TAIL_EN_MASK);
	vdma_S2MM_DMACR = XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET);
	XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_RX_OFFSET+XAXIVDMA_CR_OFFSET, vdma_S2MM_DMACR & ~XAXIVDMA_CR_TAIL_EN_MASK);


	// Pointers to the S2MM memory frame and M2SS memory frame
	volatile ycbcr_color *video_data = (ycbcr_color *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_S2MM_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET);
	volatile ycbcr_color *pMM2S_Mem = (ycbcr_color *)XAxiVdma_ReadReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_MM2S_ADDR_OFFSET+XAXIVDMA_START_ADDR_OFFSET+4);

	putchar(27);
	printf("[2J");
	while(1)
	{
		buttons = Xil_In32(XPAR_BTNS_5BITS_BASEADDR);
		switches = Xil_In32(XPAR_SWS_8BITS_BASEADDR);

		//led top left
		leds[0] = get_led_avg(video_data, 0, HORIZONTAL_WIDTH_SMALL, 0, VERTICAL_WIDTH_SMALL);

		//led top mid left
		leds[1] = get_led_avg(video_data, HORIZONTAL_WIDTH_SMALL, HORIZONTAL_WIDTH_LARGE, 0, ambient_depth);

		//led top mid right
		leds[2] = get_led_avg(video_data, HORIZONTAL_WIDTH_SMALL + HORIZONTAL_WIDTH_LARGE, HORIZONTAL_WIDTH_LARGE, 0, ambient_depth);

		//led top right
		leds[3] = get_led_avg(video_data, HORIZONTAL_WIDTH_SMALL + 2 * HORIZONTAL_WIDTH_LARGE, HORIZONTAL_WIDTH_SMALL, 0, VERTICAL_WIDTH_SMALL);

		//led left
		leds[4] = get_led_avg(video_data, 0, (ambient_depth / 2), VERTICAL_WIDTH_SMALL, VERTICAL_WIDTH_LARGE);

		//led right
		leds[5] = get_led_avg(video_data, COLS - (ambient_depth / 2), (ambient_depth / 2), VERTICAL_WIDTH_SMALL, VERTICAL_WIDTH_LARGE);

		//led bottom left
		leds[6] = get_led_avg(video_data, 0, HORIZONTAL_WIDTH_SMALL, ROWS - VERTICAL_WIDTH_SMALL, VERTICAL_WIDTH_SMALL);

		//led bottom mid left
		leds[7] = get_led_avg(video_data, HORIZONTAL_WIDTH_SMALL, HORIZONTAL_WIDTH_LARGE, ROWS - ambient_depth, ambient_depth);

		//led bottom mid right
		leds[8] = get_led_avg(video_data, HORIZONTAL_WIDTH_SMALL + HORIZONTAL_WIDTH_LARGE, HORIZONTAL_WIDTH_LARGE, ROWS - ambient_depth, ambient_depth);

		//led bottom right
		leds[9] = get_led_avg(video_data, HORIZONTAL_WIDTH_SMALL + 2 * HORIZONTAL_WIDTH_LARGE, HORIZONTAL_WIDTH_SMALL, ROWS - VERTICAL_WIDTH_SMALL, VERTICAL_WIDTH_SMALL);

		putchar(27);
		printf("[H");
		for(i = 0; i < 10; i++)
		{
			PwmSetLed(pwm, i, &leds[i]);
		}

		//AMAZ-ZA-ZING D-BUG
		printf("Red   = % 3d   \t\tRed   = % 3d   \t\tRed   = % 3d   \t\tRed   = % 3d     \n", leds[0].red, leds[1].red, leds[2].red, leds[3].red);
		printf("Green = % 3d   \t\tGreen = % 3d   \t\tGreen = % 3d   \t\tGreen = % 3d     \n", leds[0].green, leds[1].green, leds[2].green, leds[3].green);
		printf("Blue  = % 3d   \t\tBlue  = % 3d   \t\tBlue  = % 3d   \t\tBlue  = % 3d     \n", leds[0].blue, leds[1].blue, leds[2].blue, leds[3].blue);
		printf("\n\n\n\n\n");
		printf("Red   = % 3d   \t\t               \t\t               \t\tRed   = % 3d     \n", leds[4].red, leds[5].red);
		printf("Green = % 3d   \t\t               \t\t               \t\tGreen = % 3d     \n", leds[4].green, leds[5].green);
		printf("Blue  = % 3d   \t\t               \t\t               \t\tBlue  = % 3d     \n", leds[4].blue, leds[5].blue);
		printf("\n\n\n\n\n");
		printf("Red   = % 3d   \t\tRed   = % 3d   \t\tRed   = % 3d   \t\tRed   = % 3d     \n", leds[6].red, leds[7].red, leds[8].red, leds[9].red);
		printf("Green = % 3d   \t\tRed   = % 3d   \t\tGreen = % 3d   \t\tGreen = % 3d     \n", leds[6].green, leds[7].green, leds[8].green, leds[9].green);
		printf("Blue  = % 3d   \t\tRed   = % 3d   \t\tBlue  = % 3d   \t\tBlue  = % 3d     \n", leds[6].blue, leds[7].blue, leds[8].blue, leds[9].blue);

		if(switches & SW0)
		{
			parkptr |= 0x1;
			XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET, parkptr);
			draw_lines(pMM2S_Mem, video_data, ambient_depth);

			if(!(buttons & BTNU) && prev_btnu == 1)
			{
				prev_btnu = 0;
				if(ambient_depth < 540)
				{
					ambient_depth++;
				}
			}
			else if(!(buttons & BTND) && prev_btnd == 1)
			{
				prev_btnd = 0;
				if(ambient_depth > 1)
				{
					ambient_depth--;
				}
			}
			if(buttons & BTNU)
			{
				prev_btnu = 1;
			}
			else if(buttons & BTND)
			{
				prev_btnd = 1;
			}
		}
		else
		{
			parkptr &= ~0x1;
			XAxiVdma_WriteReg(config->vdma_hdmi.BaseAddr, XAXIVDMA_PARKPTR_OFFSET, parkptr);
			//for(i=0;i<1920*1080/2;i++)
			//{
				pMM2S_Mem[/*i*/0].value = video_data[/*i*/0].value; //
			//}
		}
	}

	xil_printf("Main SW processing loop complete!\r\n");


	return;
}

rgb_color get_led_avg(volatile ycbcr_color* video_data, int x_min, int width, int y_min, int height)
{
	rgb_color led_color;
	uint32_t red_avg = 0, green_avg = 0, blue_avg = 0;
	int y, x;

	for(y = y_min; y < y_min + height; y++)
	{
		for(x = x_min; x < x_min + width; x++)
		{
			led_color = ycbcr_to_rgb(video_data[y * COLS + x]);
			red_avg += led_color.red;
			green_avg += led_color.green;
			blue_avg += led_color.blue;
		}
	}
	led_color.red = red_avg / (width * height);
	led_color.green = green_avg / (width * height);
	led_color.blue = blue_avg / (width * height);

	return led_color;
}

void draw_lines(volatile ycbcr_color* video_data_out,
		volatile ycbcr_color* video_data_in,
		int ambient_depth)
{
	int i;

	for(i = 0; i < NUM_PIXELS; i++)
	{
		//left line
		if(i % WIDTH == 0)
		{
			video_data_out[i].value = WHITE;
		}
		//top line
		else if(i < WIDTH)
		{
			video_data_out[i].value = WHITE;
		}
		//right line
		else if(i % WIDTH == 959)
		{
			video_data_out[i].value = WHITE;
		}
		//bottom line
		else if(i > COLS * 1079)
		{
			video_data_out[i].value = WHITE;
		}

		//vertical width lines
		else if(i % WIDTH == HORIZONTAL_WIDTH_SMALL
				&& (i < COLS * LARGER(ambient_depth, VERTICAL_WIDTH_SMALL)))
				/**|| i > NUM_PIXELS - COLS * LARGER(ambient_depth, VERTICAL_WIDTH_SMALL)**/
		{
			video_data_out[i].value = WHITE;
		}
//		else if(i % WIDTH == HORIZONTAL_WIDTH_SMALL + HORIZONTAL_WIDTH_LARGE
//				&& (i < COLS * ambient_depth || i > NUM_PIXELS - COLS * ambient_depth))
//		{
//			video_data_out[i].value = WHITE;
//		}
//		else if(i % WIDTH == HORIZONTAL_WIDTH_SMALL + 2 * HORIZONTAL_WIDTH_LARGE
//				&& (i < COLS * LARGER(ambient_depth, VERTICAL_WIDTH_SMALL)
//				|| i > NUM_PIXELS - COLS * LARGER(ambient_depth, VERTICAL_WIDTH_SMALL)))
//		{
//			video_data_out[i].value = WHITE;
//		}

		//horizontal width lines
//		else if(i > VERTICAL_WIDTH_SMALL * WIDTH
//				&& (i < VERTICAL_WIDTH_SMALL * WIDTH + LARGER(HORIZONTAL_WIDTH_SMALL, ambient_depth)
//				|| i > VERTICAL_WIDTH_SMALL * (WIDTH + 1) - LARGER(HORIZONTAL_WIDTH_SMALL, ambient_depth)))
//		{
//			video_data_out[i].value = WHITE;
//		}
//		else if(i > (VERTICAL_WIDTH_SMALL + VERTICAL_WIDTH_LARGE) * WIDTH
//				&& (i < (VERTICAL_WIDTH_SMALL + VERTICAL_WIDTH_LARGE) * WIDTH + LARGER(HORIZONTAL_WIDTH_SMALL, ambient_depth)
//				|| i > (VERTICAL_WIDTH_SMALL + VERTICAL_WIDTH_LARGE) * (WIDTH + 1) - LARGER(HORIZONTAL_WIDTH_SMALL, ambient_depth)))
//		{
//			video_data_out[i].value = WHITE;
//		}

		//ambient depth
//		else if(i > ambient_depth * WIDTH + HORIZONTAL_WIDTH_SMALL
//				&& i < ambient_depth * (WIDTH + 1) - HORIZONTAL_WIDTH_SMALL)
//		{
//			video_data_out[i].value = WHITE;
//		}
//		else if(i < NUM_PIXELS - (ambient_depth * WIDTH) - HORIZONTAL_WIDTH_SMALL
//				&& i > NUM_PIXELS - (ambient_depth * (WIDTH + 1) + HORIZONTAL_WIDTH_SMALL))
//		{
//			video_data_out[i].value = WHITE;
//		}
//		else if(i % WIDTH == ambient_depth && i > COLS * VERTICAL_WIDTH_SMALL
//				&& i < NUM_PIXELS - (COLS * VERTICAL_WIDTH_SMALL))
//		{
//			video_data_out[i].value = WHITE;
//		}
//		else if(i % WIDTH == WIDTH - ambient_depth && i > COLS * VERTICAL_WIDTH_SMALL
//				&& i < NUM_PIXELS - (COLS * VERTICAL_WIDTH_SMALL))
//		{
//			video_data_out[i].value = WHITE;
//		}

		//no white line
		else
		{
			video_data_out[i] = video_data_in[i];
		}
	}
}
